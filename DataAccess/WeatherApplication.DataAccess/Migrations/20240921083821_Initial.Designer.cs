// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherApplication.DataAccess.Context;

#nullable disable

namespace WeatherApplication.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240921083821_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WeatherApplication.Entities.Concrete.TableModels.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("WeatherApplication.Entities.Concrete.TableModels.ModelXml.WeatherReportXml", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<float>("Clouds")
                        .HasColumnType("real");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<float>("FeelsLike")
                        .HasColumnType("real");

                    b.Property<float>("GroundLevel")
                        .HasColumnType("real");

                    b.Property<float>("Humidity")
                        .HasColumnType("real");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("Main")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Pressure")
                        .HasColumnType("real");

                    b.Property<float>("SeaLevel")
                        .HasColumnType("real");

                    b.Property<float>("Temp")
                        .HasColumnType("real");

                    b.Property<float>("TempMax")
                        .HasColumnType("real");

                    b.Property<float>("TempMin")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WeatherId")
                        .HasColumnType("int");

                    b.Property<float>("WindDegree")
                        .HasColumnType("real");

                    b.Property<float>("WindGust")
                        .HasColumnType("real");

                    b.Property<float>("WindSpeed")
                        .HasColumnType("real");

                    b.Property<string>("XmlData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("DistrictId");

                    b.ToTable("WeatherReportXmls");
                });

            modelBuilder.Entity("WeatherApplication.Entities.Concrete.TableModels.WeatherReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float>("Clouds")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<float>("FeelsLike")
                        .HasColumnType("real");

                    b.Property<float>("GroundLevel")
                        .HasColumnType("real");

                    b.Property<float>("Humidity")
                        .HasColumnType("real");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("Main")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Pressure")
                        .HasColumnType("real");

                    b.Property<float>("SeaLevel")
                        .HasColumnType("real");

                    b.Property<float>("Temp")
                        .HasColumnType("real");

                    b.Property<float>("TempMax")
                        .HasColumnType("real");

                    b.Property<float>("TempMin")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WeatherId")
                        .HasColumnType("int");

                    b.Property<float>("WindDegree")
                        .HasColumnType("real");

                    b.Property<float>("WindGust")
                        .HasColumnType("real");

                    b.Property<float>("WindSpeed")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("WeatherReports");
                });

            modelBuilder.Entity("WeatherApplication.Entities.Concrete.TableModels.ModelXml.WeatherReportXml", b =>
                {
                    b.HasOne("WeatherApplication.Entities.Concrete.TableModels.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("WeatherApplication.Entities.Concrete.TableModels.WeatherReport", b =>
                {
                    b.HasOne("WeatherApplication.Entities.Concrete.TableModels.District", "District")
                        .WithMany("WeatherReports")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("WeatherApplication.Entities.Concrete.TableModels.District", b =>
                {
                    b.Navigation("WeatherReports");
                });
#pragma warning restore 612, 618
        }
    }
}
